// Autodarts API Script für ioBroker (mit Reachability-Datenpunkt)
// by inventwo 2025
// ===============================================================
// - Prüft vor jeder API-Abfrage, ob der Raspberry erreichbar ist
// - Vermeidet Log-Spam, wenn das Gerät aus ist
// - Setzt Datenpunkt "reachable" (true/false)

const http = require("http");
const net = require("net");

const INTERVAL = 2000; // alle 2 Sekunden
const CONNECTION_TIMEOUT = 1000; // Timeout für Reachability-Test (in ms)

const BASE_ID = "0_userdata.0.Autodarts.API";
const AUTODARTS_HOST = "192.168.130.190";
const AUTODARTS_PORT = 3180;
const AUTODARTS_PATH = "/api/state";

const PLAYER_ID = "player1";
const PLAYER_NAME = "SKVAREL";
const MAX_THROWS = 3;

// Letzter bekannter Status
let lastThrowsSignature = "";
let lastReachable = false;

// ---------------------------------------------------
// Hilfsfunktion: State sicher anlegen und setzen
function setStateSafe(id, value, type = "mixed") {
    const fullId = `${BASE_ID}.${id}`;
    if (!existsState(fullId)) {
        createState(fullId, value, { type: type, read: true, write: false });
    }
    setState(fullId, value, true);
}

// ---------------------------------------------------
// Dartwert berechnen
function calcScore(dart) {
    if (!dart?.segment?.number || !dart?.segment?.multiplier) return 0;
    return dart.segment.number * dart.segment.multiplier;
}

// ---------------------------------------------------
// Prüfen, ob Raspberry erreichbar ist
function isHostReachable(host, port, timeout = CONNECTION_TIMEOUT) {
    return new Promise(resolve => {
        const socket = new net.Socket();
        let reachable = false;

        socket.setTimeout(timeout);
        socket.once("connect", () => {
            reachable = true;
            socket.destroy();
        });
        socket.once("timeout", () => socket.destroy());
        socket.once("error", () => socket.destroy());
        socket.once("close", () => resolve(reachable));

        socket.connect(port, host);
    });
}

// ---------------------------------------------------
// Hauptfunktion: Autodarts API holen
function fetchAutodarts() {
    isHostReachable(AUTODARTS_HOST, AUTODARTS_PORT).then(reachable => {
        setStateSafe("reachable", reachable, "boolean"); // neuer Datenpunkt

        if (!reachable) {
            if (lastReachable) log(`⚠️ Autodarts (${AUTODARTS_HOST}) nicht erreichbar`, "warn");
            lastReachable = false;
            setStateSafe("connected", false, "boolean");
            return; // keine API-Abfrage, wenn nicht erreichbar
        }

        if (!lastReachable) log(`✅ Autodarts (${AUTODARTS_HOST}) wieder erreichbar`, "info");
        lastReachable = true;

        const options = {
            hostname: AUTODARTS_HOST,
            port: AUTODARTS_PORT,
            path: AUTODARTS_PATH,
            method: "GET"
        };

        const req = http.request(options, res => {
            let data = "";
            res.on("data", chunk => { data += chunk; });
            res.on("end", () => {
                try {
                    const state = JSON.parse(data);

                    // Grunddaten
                    setStateSafe("connected", state.connected, "boolean");
                    setStateSafe("running", state.running, "boolean");
                    setStateSafe("status", state.status, "string");
                    setStateSafe("event", state.event, "string");
                    setStateSafe("numThrows", state.numThrows, "number");

                    // Wenn keine Würfe, abbrechen
                    if (!state.throws || state.throws.length === 0) return;

                    // Nur die letzten 3 Würfe
                    const lastThrows = state.throws.slice(-MAX_THROWS);
                    const signature = JSON.stringify(lastThrows.map(t => t.segment.name));

                    // Keine Änderung -> keine Aktion
                    if (signature === lastThrowsSignature) return;
                    lastThrowsSignature = signature;

                    // Summe berechnen
                    const sum = lastThrows.reduce((acc, dart) => acc + calcScore(dart), 0);

                    // Datenpunkte für Würfe schreiben
                    lastThrows.forEach((dart, idx) => {
                        const base = `players.${PLAYER_ID}.throws.throw_${idx + 1}`;
                        setStateSafe(`${base}.segment_name`, dart.segment.name, "string");
                        setStateSafe(`${base}.segment_number`, dart.segment.number, "number");
                        setStateSafe(`${base}.segment_bed`, dart.segment.bed, "string");
                        setStateSafe(`${base}.segment_multiplier`, dart.segment.multiplier, "number");
                        setStateSafe(`${base}.coord_x`, dart.coords.x, "number");
                        setStateSafe(`${base}.coord_y`, dart.coords.y, "number");
                        setStateSafe(`${base}.score`, calcScore(dart), "number");
                    });

                    // Gesamtsumme + Trigger
                    setStateSafe(`players.${PLAYER_ID}.lastSum`, sum, "number");
                    setStateSafe(`players.${PLAYER_ID}.name`, PLAYER_NAME, "string");
                    setStateSafe(`players.${PLAYER_ID}.throwEvent`, Date.now(), "number");

                } catch (e) {
                    log(`Fehler beim Verarbeiten der Autodarts API: ${e}`, "error");
                }
            });
        });

        req.on("error", e => log(`HTTP Fehler: ${e}`, "error"));
        req.end();
    });
}

// ---------------------------------------------------
// Start
fetchAutodarts();
setInterval(fetchAutodarts, INTERVAL);
